type AggregateIntegration {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Integration {
  id: ID!
  createdAt: DateTime!
  type: IntegrationType!
  project: Project!
}

type IntegrationConnection {
  pageInfo: PageInfo!
  edges: [IntegrationEdge]!
  aggregate: AggregateIntegration!
}

input IntegrationCreateInput {
  type: IntegrationType!
  project: ProjectCreateOneWithoutIntegrationsInput!
}

input IntegrationCreateManyWithoutProjectInput {
  create: [IntegrationCreateWithoutProjectInput!]
  connect: [IntegrationWhereUniqueInput!]
}

input IntegrationCreateWithoutProjectInput {
  type: IntegrationType!
}

type IntegrationEdge {
  node: Integration!
  cursor: String!
}

enum IntegrationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type IntegrationPreviousValues {
  id: ID!
  createdAt: DateTime!
  type: IntegrationType!
}

input IntegrationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  type: IntegrationType
  type_not: IntegrationType
  type_in: [IntegrationType!]
  type_not_in: [IntegrationType!]
  AND: [IntegrationScalarWhereInput!]
  OR: [IntegrationScalarWhereInput!]
  NOT: [IntegrationScalarWhereInput!]
}

type IntegrationSubscriptionPayload {
  mutation: MutationType!
  node: Integration
  updatedFields: [String!]
  previousValues: IntegrationPreviousValues
}

input IntegrationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IntegrationWhereInput
  AND: [IntegrationSubscriptionWhereInput!]
  OR: [IntegrationSubscriptionWhereInput!]
  NOT: [IntegrationSubscriptionWhereInput!]
}

enum IntegrationType {
  EMAIL
  FACEBOOK
}

input IntegrationUpdateInput {
  type: IntegrationType
  project: ProjectUpdateOneRequiredWithoutIntegrationsInput
}

input IntegrationUpdateManyDataInput {
  type: IntegrationType
}

input IntegrationUpdateManyMutationInput {
  type: IntegrationType
}

input IntegrationUpdateManyWithoutProjectInput {
  create: [IntegrationCreateWithoutProjectInput!]
  delete: [IntegrationWhereUniqueInput!]
  connect: [IntegrationWhereUniqueInput!]
  set: [IntegrationWhereUniqueInput!]
  disconnect: [IntegrationWhereUniqueInput!]
  update: [IntegrationUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [IntegrationUpsertWithWhereUniqueWithoutProjectInput!]
  deleteMany: [IntegrationScalarWhereInput!]
  updateMany: [IntegrationUpdateManyWithWhereNestedInput!]
}

input IntegrationUpdateManyWithWhereNestedInput {
  where: IntegrationScalarWhereInput!
  data: IntegrationUpdateManyDataInput!
}

input IntegrationUpdateWithoutProjectDataInput {
  type: IntegrationType
}

input IntegrationUpdateWithWhereUniqueWithoutProjectInput {
  where: IntegrationWhereUniqueInput!
  data: IntegrationUpdateWithoutProjectDataInput!
}

input IntegrationUpsertWithWhereUniqueWithoutProjectInput {
  where: IntegrationWhereUniqueInput!
  update: IntegrationUpdateWithoutProjectDataInput!
  create: IntegrationCreateWithoutProjectInput!
}

input IntegrationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  type: IntegrationType
  type_not: IntegrationType
  type_in: [IntegrationType!]
  type_not_in: [IntegrationType!]
  project: ProjectWhereInput
  AND: [IntegrationWhereInput!]
  OR: [IntegrationWhereInput!]
  NOT: [IntegrationWhereInput!]
}

input IntegrationWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createIntegration(data: IntegrationCreateInput!): Integration!
  updateIntegration(data: IntegrationUpdateInput!, where: IntegrationWhereUniqueInput!): Integration
  updateManyIntegrations(data: IntegrationUpdateManyMutationInput!, where: IntegrationWhereInput): BatchPayload!
  upsertIntegration(where: IntegrationWhereUniqueInput!, create: IntegrationCreateInput!, update: IntegrationUpdateInput!): Integration!
  deleteIntegration(where: IntegrationWhereUniqueInput!): Integration
  deleteManyIntegrations(where: IntegrationWhereInput): BatchPayload!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Project {
  id: ID!
  createdAt: DateTime!
  name: String!
  integrations(where: IntegrationWhereInput, orderBy: IntegrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Integration!]
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  name: String!
  integrations: IntegrationCreateManyWithoutProjectInput
}

input ProjectCreateOneWithoutIntegrationsInput {
  create: ProjectCreateWithoutIntegrationsInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutIntegrationsInput {
  name: String!
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdateInput {
  name: String
  integrations: IntegrationUpdateManyWithoutProjectInput
}

input ProjectUpdateManyMutationInput {
  name: String
}

input ProjectUpdateOneRequiredWithoutIntegrationsInput {
  create: ProjectCreateWithoutIntegrationsInput
  update: ProjectUpdateWithoutIntegrationsDataInput
  upsert: ProjectUpsertWithoutIntegrationsInput
  connect: ProjectWhereUniqueInput
}

input ProjectUpdateWithoutIntegrationsDataInput {
  name: String
}

input ProjectUpsertWithoutIntegrationsInput {
  update: ProjectUpdateWithoutIntegrationsDataInput!
  create: ProjectCreateWithoutIntegrationsInput!
}

input ProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  integrations_every: IntegrationWhereInput
  integrations_some: IntegrationWhereInput
  integrations_none: IntegrationWhereInput
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  integration(where: IntegrationWhereUniqueInput!): Integration
  integrations(where: IntegrationWhereInput, orderBy: IntegrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Integration]!
  integrationsConnection(where: IntegrationWhereInput, orderBy: IntegrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IntegrationConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  node(id: ID!): Node
}

type Subscription {
  integration(where: IntegrationSubscriptionWhereInput): IntegrationSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
}
